# BITS 32

# origin equ 0x08048000

# ehdr:                       ; Elf32_Ehdr
    7f 45 4c 46 01 01 01 #     db 0x7F, "ELF", 1, 1, 1 ; e_ident
    00 00 00 00 00 00 00 00 00 #     db 0, 0, 0, 0, 0, 0, 0, 0, 0
    02 00            #     dw 2                    ; e_type
    03 00            #     dw 3                    ; e_machine
    01 00 00 00      #     dd 1                    ; e_version
    54 80 04 08      #     dd _start - $$ + origin ; e_entry
    34 00 00 00      #     dd phdr - $$            ; e_phoff
    00 00 00 00      #     dd 0                    ; e_shoff
    00 00 00 00      #     dd 0                    ; e_flags
    34 00            #     dw ehdrsize             ; e_ehsize
    20 00            #     dw phdrsize             ; e_phentsize
    01 00            #     dw 1                    ; e_phnum
    00 00            #     dw 0                    ; e_shentsize
    00 00            #     dw 0                    ; e_shnum
    00 00            #     dw 0                    ; e_shstrndx

# ehdrsize equ $ - ehdr

# phdr:                       ; Elf32_Phdr
    01 00 00 00      #     dd 1                    ; p_type
    00 00 00 00      #     dd 0                    ; p_offset
    00 80 04 08      #     dd origin               ; p_vaddr
    00 80 04 08      #     dd origin               ; p_paddr
    bf 00 00 00      #     dd filesize             ; p_filesz
    bf 00 00 00      #     dd filesize             ; p_memsz
    05 00 00 00      #     dd 5                    ; p_flags
    00 10 00 00      #     dd 0x1000               ; p_align

# phdrsize equ $ - phdr


# _start:
    e8 25 00 00 00   #     call gethex
    c1 e0 04         #     shl eax,4
    50               #     push eax
    e8 1c 00 00 00   #     call gethex
    01 04 24         #     add [esp],eax
    e8 03 00 00 00   #     call putchar
    58               #     pop eax
    eb e7            #     jmp _start

# putchar:
    31 db            #     xor ebx,ebx
    43               #     inc ebx
    8d 4c 24 04      #     lea ecx,[esp+4]
    89 da            #     mov edx,ebx
    b8 04 00 00 00   #     mov eax,4
    cd 80            #     int 0x80
    c3               #     ret

# gethex:
    e8 1f 00 00 00   #     call getchar
    83 f8 23         #     cmp eax,35
    75 0c            #     jnz .convhex
# .loop:
    e8 15 00 00 00   #     call getchar
    83 f8 0a         #     cmp eax,10
    75 f6            #     jnz .loop
    eb ea            #     jmp gethex
# .convhex:
    83 e8 30         #     sub eax,48
    7c e5            #     jl gethex
    83 f8 30         #     cmp eax,48
    7c 03            #     jl .ret
    83 e8 27         #     sub eax,39
# .ret:
    c3               #     ret

# getchar:
    6a 00            #     push 0
    31 db            #     xor ebx,ebx
    89 e1            #     mov ecx,esp
    89 da            #     mov edx,ebx
    42               #     inc edx
    b8 03 00 00 00   #     mov eax,3
    cd 80            #     int 0x80
    85 c0            #     test eax,eax
    74 02            #     jz exit
    58               #     pop eax
    c3               #     ret

# exit:
    31 c0            #     xor eax,eax
    89 c3            #     mov ebx,eax
    40               #     inc eax
    cd 80            #     int 0x80

# filesize equ $ - $$
